#:kivy 2.0.0
#:import Window kivy.core.window.Window

<MenuScreen>:
    canvas:
        Color:
            rgba: 0.71, 0.78, 0.84, 1
        Rectangle:
            pos: self.pos
            size: self.size

    Image:
        id: bg
        source: "images/menu_screen.png"
        pos: 0, 0
        size: Window.size
        center: Window.center

    BoxLayout:
        orientation: "vertical"
        size_hint: 100/4000., 100/2000.
        spacing: bg.norm_image_size[1]*0.035
        pos: 
            (bg.center_x - bg.norm_image_size[0]/2) + bg.norm_image_size[0]*(1160/4000.), \
            (bg.center_y - bg.norm_image_size[1]/2) + bg.norm_image_size[1]*(330/2000.)
        Button:
            border: 0,0,0,0
            size_hint: None, None
            size:  (bg.norm_image_size[0]*(100/4000.)*2), (bg.norm_image_size[1]*(100/2000.)*2)
            background_normal: "images/buttons/liftbutton0.png"
            background_down:  "images/buttons/liftbutton1.png"
            on_release: root.manager.current = 'strengths'
        Button:
            border: 0,0,0,0
            size_hint: None, None
            size:  (bg.norm_image_size[0]*(100/4000.)*2), (bg.norm_image_size[1]*(100/2000.)*2)
            background_normal: "images/buttons/liftbutton0.png"
            background_down:  "images/buttons/liftbutton1.png"
            on_release: root.manager.current = 'continue'
        Button:
            border: 0,0,0,0
            size_hint: None, None
            size:  (bg.norm_image_size[0]*(100/4000.)*2), (bg.norm_image_size[1]*(100/2000.)*2)
            background_normal: "images/buttons/liftbutton0.png"
            background_down:  "images/buttons/liftbutton1.png"
            on_release: root.manager.current = 'settings'
        Button:
            border: 0,0,0,0
            size_hint: None, None
            size:  (bg.norm_image_size[0]*(100/4000.)*2), (bg.norm_image_size[1]*(100/2000.)*2)
            background_normal: "images/buttons/liftbutton0.png"
            background_down:  "images/buttons/liftbutton1.png"
            on_release: root.manager.current = '?'
    Button:
        color: (0,0,0,1)
        font_size: bg.norm_image_size[1]*0.033
        text: app.tr("menu.quit")
        border: 0,0,0,0
        size_hint: None, None
        size:  (bg.norm_image_size[0]*(400/4000.)), (bg.norm_image_size[1]*(100/2000.))
        pos_hint: {"left": 0.01, "top": 0.99}
        background_normal: "images/buttons/longbutton0.png"
        background_down:  "images/buttons/longbutton1.png"
        on_release: app.stop()


<DeckButton>:
    source: "images/card_pile.png"
    background_normal: "images/card_pile.png"
    border: 0,0,0,0
    size_hint: None, None

<CardButton>:
    #allow_stretch: True
    #keep_ratio: True
    on_press:
        app.root.get_screen('strengths').on_card_tap(self.index)
    # Arrow pointing at the selected card
    Image:
        source: root.arrow_src
        size_hint: None, None
        # scale arrow relative to card size (tweak factor)
        size: min(root.width, root.height) * 0.85, min(root.width, root.height) * 0.85
        opacity: 1 if root.selected else 0
        center: root.center_x, root.y
# Menu for selecting strength cards
<StrengthMenu>:
    canvas:
        Color:
            rgba: 0.71, 0.78, 0.84, 1
        Rectangle:
            pos: self.pos
            size: self.size

    Image:
        id: bg
        source: "images/strength_on_menu.png"
        pos: 0, 0
        size: Window.size
        center: Window.center
    Label:
        id: selectcategory
        text: app.tr("strengths.title")
        font_size: bg.norm_image_size[0] * 0.040
        color: (0,0,0)
        center: (bg.center_x + bg.norm_image_size[0]*0.0000, bg.center_y + bg.norm_image_size[1]*0.4000)
    Label:
        id: selectcategory
        text: app.tr("strengths.pickpile")
        font_size: bg.norm_image_size[0] * 0.013
        color: (0,0,0)
        center: (bg.center_x + bg.norm_image_size[0]*0.0970, bg.center_y + bg.norm_image_size[1]*0.0450)
    Label:
        id: selecttitle
        text: ""
        font_size: bg.norm_image_size[0] * 0.015
        color: (0,0,0)
        center: (bg.center_x + bg.norm_image_size[0]*0.0970, bg.center_y + bg.norm_image_size[1]*0.0200)
    # Info text (speech bubble)
    Label:
        id: infotext
        markup: True
        text: app.tr("strengths.info")
        text_size: bg.norm_image_size[0]*0.16, None
        size_hint_y: None
        font_size: bg.norm_image_size[0] * 0.0090
        color: (0,0,0)
        center: (bg.center_x - bg.norm_image_size[0]*0.2150, bg.center_y + bg.norm_image_size[1]*0.2200)
        halign: "center"
        valign: "middle"
    # Odd cardpiles
    GridLayout:
        id: row1
        cols: 3
        spacing: bg.norm_image_size[0]*0.0635
        size_hint: None, None
        size: self.minimum_size
        row_default_height: bg.norm_image_size[1]*0.055
        row_force_default: True
        pos: (bg.center_x - self.width/2 + bg.norm_image_size[0]*0.0695, bg.center_y - self.height/2 + bg.norm_image_size[1]*0.159)
        Label:
            id: label0
            text: app.tr("strengths.pile1")
            font_size: self.height * 0.4
            color: (0,0,0)
        Label:
            id: label2
            text: app.tr("strengths.pile3")
            font_size: self.height * 0.4
            color: (0,0,0)
        Label:
            id: label4
            text: app.tr("strengths.pile5")
            font_size: self.height * 0.4
            color: (0,0,0)
        DeckButton:
            id: deck0
            index: 0
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
            on_release: root.selectDeck(self.index)
        DeckButton:
            id: deck2
            index: 2
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
            on_release: root.selectDeck(self.index)
        DeckButton:
            id: deck4
            index: 4
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
            on_release: root.selectDeck(self.index)
    # Even cardpiles
    GridLayout:
        cols: 3
        id: row2
        spacing: bg.norm_image_size[0]*0.0635, -bg.norm_image_size[1]*0.010
        size_hint: None, None
        size: self.minimum_size
        row_default_height: bg.norm_image_size[1]*0.055
        row_force_default: True
        pos: (bg.center_x - self.width/2 + bg.norm_image_size[0]*0.132, bg.center_y - self.height/2 + bg.norm_image_size[1]*0.031)
        DeckButton:
            id: deck1
            index: 1
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
            on_release: root.selectDeck(self.index)
        DeckButton:
            id: deck3
            index: 3
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
            on_release: root.selectDeck(self.index)
        DeckButton:
            id: deck5
            index: 5
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
            on_release: root.selectDeck(self.index)
        Label:
            id: label1
            text: app.tr("strengths.pile2")
            font_size: self.height * 0.4
            color: (0,0,0)
        Label:
            id: label3
            text: app.tr("strengths.pile4")
            font_size: self.height * 0.4
            color: (0,0,0)
        Label:
            id: label5
            text: app.tr("strengths.pile6")
            font_size: self.height * 0.4
            color: (0,0,0)
    # Chosen cards
    RecycleView:
        id: cards_rv
        viewclass: "CardButton"
        size_hint: None, None
        do_scroll_y: False
        pos: 
            (bg.center_x - bg.norm_image_size[0]/2) + bg.norm_image_size[0]*(1610/4000.), \
            (bg.center_y - bg.norm_image_size[1]/2) + bg.norm_image_size[1]*(220/2000.)
        width:  (bg.norm_image_size[0]*(250/4000.)*5) * 1.1 + (bg.norm_image_size[0]*0.019*4) * 1.1  # 5 cards + 4 gaps
        height: bg.norm_image_size[1]*(350/2000.) * 1.1 + bg.norm_image_size[1]*0.2       # card_h + leeway for arrow
        RecycleBoxLayout:
            id: cards_rv_layout
            default_size: (bg.norm_image_size[0]*(250/4000.)) * 1.1, (bg.norm_image_size[1]*(350/2000.)) * 1.1
            default_size_hint: None, None
            size_hint_y: None
            height: bg.norm_image_size[1] * (350/2000.) * 1.1
            spacing: bg.norm_image_size[0]*0.0115

    # Card images covering decks
    GridLayout:
        cols: 3
        id: cardrow1
        spacing: bg.norm_image_size[0]*0.0635, -bg.norm_image_size[1]*0.010
        size_hint: None, None
        size: self.minimum_size
        row_default_height: bg.norm_image_size[1]*0.055
        row_force_default: True
        pos: (bg.center_x - self.width/2 + bg.norm_image_size[0]*0.0695, bg.center_y - self.height/2 + bg.norm_image_size[1]*0.0550)
        Image:
            id: cover0
            source: "images/cards/card0.png"
            size_hint: None, None
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
        Image:
            id: cover2
            source: "images/cards/card10.png"
            size_hint: None, None
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
        Image:
            id: cover4
            source: "images/cards/card17.png"
            size_hint: None, None
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
    GridLayout:
        cols: 3
        id: cardrow2
        spacing: bg.norm_image_size[0]*0.0635, -bg.norm_image_size[1]*0.010
        size_hint: None, None
        size: self.minimum_size
        row_default_height: bg.norm_image_size[1]*0.055
        row_force_default: True
        pos: (bg.center_x - self.width/2 + bg.norm_image_size[0]*0.132, bg.center_y - self.height/2 + bg.norm_image_size[1]*0.0410)
        Image:
            id: cover1
            source: "images/cards/card5.png"
            size_hint: None, None
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
        Image:
            id: cover3
            source: "images/cards/card14.png"
            size_hint: None, None
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
        Image:
            id: cover5
            source: "images/cards/card21.png"
            size_hint: None, None
            size: (bg.norm_image_size[0]*(246/4000.)), (bg.norm_image_size[1]*(386/2000.))
        
    # Buttons
    BoxLayout:
        size_hint: 400/4000., 100/2000.
        spacing: bg.norm_image_size[0]*0.15
        pos: 
            (bg.center_x - bg.norm_image_size[0]/2) + bg.norm_image_size[0]*(800/4000.), \
            (bg.center_y - bg.norm_image_size[1]/2) + bg.norm_image_size[1]*(290/2000.)
        Button:
            color: (0,0,0,1)
            font_size: bg.norm_image_size[0]*0.007
            text: app.tr("strengths.back")
            border: 0,0,0,0
            size_hint: None, None
            size:  (bg.norm_image_size[0]*(400/4000.)), (bg.norm_image_size[1]*(100/2000.))
            background_normal: "images/buttons/longbutton0.png"
            background_down:  "images/buttons/longbutton1.png"
            on_release: root.manager.current = 'menu'
        Button:
            color: (0,0,0,1)
            font_size: bg.norm_image_size[0]*0.010
            text: app.tr("strengths.random")
            border: 0,0,0,0
            size_hint: None, None
            size:  (bg.norm_image_size[0]*(400/4000.)), (bg.norm_image_size[1]*(100/2000.))
            background_normal: "images/buttons/longbutton0.png"
            background_down:  "images/buttons/longbutton1.png"
            on_release: root.randomizeFavo()
        Button:
            color: (0,0,0,1)
            font_size: bg.norm_image_size[0]*0.009
            text: app.tr("strengths.start")
            border: 0,0,0,0
            size_hint: None, None
            size:  (bg.norm_image_size[0]*(400/4000.)), (bg.norm_image_size[1]*(100/2000.))
            background_normal: "images/buttons/longbutton0.png"
            background_down:  "images/buttons/longbutton1.png"
            on_release: root.manager.current = 'game'


<SettingsScreen>:
    canvas:
        Color:
            rgba: 0.71, 0.78, 0.84, 1
        Rectangle:
            pos: self.pos
            size: self.size
    Button:
        color: (0,0,0,1)
        font_size: 14
        text: app.tr("strengths.back")
        border: 0,0,0,0
        size_hint: None, None
        size: dp(100), dp(25)
        pos_hint: {"left": 0.01, "top": 0.99}
        background_normal: "images/buttons/longbutton0.png"
        background_down:  "images/buttons/longbutton1.png"
        on_release: root.manager.current = 'menu'

<QuestionScreen>:
    canvas:
        Color:
            rgba: 0.71, 0.78, 0.84, 1
        Rectangle:
            pos: self.pos
            size: self.size
    Button:
        color: (0,0,0,1)
        font_size: 14
        text: app.tr("strengths.back")
        border: 0,0,0,0
        size_hint: None, None
        size: dp(100), dp(25)
        pos_hint: {"left": 0.01, "top": 0.99}
        background_normal: "images/buttons/longbutton0.png"
        background_down:  "images/buttons/longbutton1.png"
        on_release: root.manager.current = 'menu'
# Game screen
<GameScreen>:
    ShopperGame:
        id: game
# Player
<Player>:
    canvas:
        Color: 
            rgba: 1, 1, 1, 1      # neutral (no tint)
        Rectangle:
            pos: self.pos
            size: self.size
            texture: root.texture

# Tiles
<Tile>:
    canvas:
        Color: 
            rgba: 1, 1, 1, 1      # neutral (no tint)
        Rectangle:
            pos: self.pos
            size: self.size
            texture: root.texture
# Rooms
<Room>:
    GridLayout:
        id: grid
        cols: 1
        size_hint: None, None
        size: self.minimum_size
        pos_hint: {"center_x": 0.5, "center_y": 0.5}
        row_force_default: True
        col_force_default: True
        row_default_height: dp(46)
        col_default_width:  dp(46)

# The game
<ShopperGame>:
    canvas.before:
        Color: 
            rgba: 0.627,0.820,1,1
            #rgba: 1,1,1,1
        Rectangle: 
            pos: self.pos
            size: self.size
    currentRoom: room
    Room:
        id: room
        center: root.center
    Player:
        id: player
        size_hint: None, None
        size: 36*2, 41*2
        center: root.center


